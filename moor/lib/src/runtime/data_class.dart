import 'dart:convert';

/// A common supertype for all data classes generated by moor. Data classes are
/// immutable structures that represent a single row.
abstract class DataClass {
  const DataClass();

  /// Converts this object into a representation that can be encoded with
  /// [json]. The [serializer] can be used to configure how individual values
  /// will be encoded.
  Map<String, dynamic> toJson(
      {ValueSerializer serializer = const ValueSerializer.defaults()});

  /// Converts this object into a json representation. The [serializer] can be
  /// used to configure how individual values will be encoded.
  String toJsonString(
      {ValueSerializer serializer = const ValueSerializer.defaults()}) {
    return json.encode(toJson(serializer: serializer));
  }
}

/// Serializer responsible for mapping atomic types from and to json.
abstract class ValueSerializer {
  const ValueSerializer();

  /// The default serializer encodes date times as a unix-timestamp in
  /// milliseconds.
  const factory ValueSerializer.defaults() = _DefaultValueSerializer;

  /// Converts the [value] to something that can be passed to
  /// [JsonCodec.encode].
  dynamic toJson<T>(T value);

  /// Inverse of [toJson]: Converts a value obtained from [JsonCodec.decode]
  /// into a value that can be hold by data classes.
  T fromJson<T>(dynamic json);
}

class _DefaultValueSerializer extends ValueSerializer {
  const _DefaultValueSerializer();

  @override
  T fromJson<T>(json) {
    if (T == DateTime) {
      return DateTime.fromMillisecondsSinceEpoch(json as int) as T;
    }

    return json as T;
  }

  @override
  dynamic toJson<T>(T value) {
    if (value is DateTime) {
      return value.millisecondsSinceEpoch;
    }

    return value;
  }
}
